(function () {
	var obj =  function (env, pkg, server, isSSL) {
		let me = this;
		var ioClient = require(env.root_path + '/package/socket.io-client/node_modules/socket.io-client');
		
		this.getCluster = function (host) {
			let me = this, DS_m = {}, DS_d = {}, DS = {};	
			delete require.cache[env.config_path + '/main_dns.json'];	
			try { DS_m = require(env.config_path + '/main_dns.json'); } catch(e) {}
			
			delete require.cache[env.config_path + '/dynamic_dns.json'];	
			try { DS_d = require(env.config_path + '/dynamic_dns.json'); } catch(e) {}
			
			Object.assign(DS, DS_m, DS_d);
			if (!DS[host]) return [];
			let list = {}, ip_list = [];
			for(o in DS) {
				if ((host.match(/^comm([0-9]+)\_dev\.([a-z0-9]+)\.([a-z0-9]+)$/ig) &&
						o.match(/^comm([0-9]+)\_dev\.([a-z0-9]+)\.([a-z0-9]+)$/ig)) 
					|| (host.match(/^comm([0-9]+)\_prod\.([a-z0-9]+)\.([a-z0-9]+)$/ig) &&
						o.match(/^comm([0-9]+)\_prod\.([a-z0-9]+)\.([a-z0-9]+)$/ig))
					|| (host.match(/^comm([0-9]+)\_qa\.([a-z0-9]+)\.([a-z0-9]+)$/ig) &&
						o.match(/^comm([0-9]+)\_qa\.([a-z0-9]+)\.([a-z0-9]+)$/ig))
				) { 
					 if (DS[o] !== DS[host]) {
						 if (ip_list.indexOf(DS[o]) === -1) {
							list[o] = DS[o];
							ip_list.push(list[o])
						 }
					 }
				}
				
			}
			return list;
		};
		this.getHostToIp = function (host) {
			let me = this, DS_m = {}, DS_d = {}, DS = {};	
			delete require.cache[env.config_path + '/main_dns.json'];	
			try { DS_m = require(env.config_path + '/main_dns.json'); } catch(e) {}
			
			delete require.cache[env.config_path + '/dynamic_dns.json'];	
			try { DS_d = require(env.config_path + '/dynamic_dns.json'); } catch(e) {}
			
			Object.assign(DS, DS_m, DS_d);
			return DS[host];
		};
		this.getHostToIp = function (host) {
			let me = this, DS_m = {}, DS_d = {}, DS = {};	
			delete require.cache[env.config_path + '/main_dns.json'];	
			try { DS_m = require(env.config_path + '/main_dns.json'); } catch(e) {}
			
			delete require.cache[env.config_path + '/dynamic_dns.json'];	
			try { DS_d = require(env.config_path + '/dynamic_dns.json'); } catch(e) {}
			
			Object.assign(DS, DS_m, DS_d);
			return DS[host];
		};		
		me.hubCommunication = function (cfg, incomeData) {
			let me = this, clusters =  me.getCluster(cfg.host);
			
			var CP = new pkg.crowdProcess(), _f = {};
			for(o in clusters) {
				_f[o] = (function(o) { 
					return function(cbk) {
						var link_url = ((isSSL) ? 'https://' : 'http://') + o + '/';
						var ioCSocket = ioClient.connect(link_url, {reconnection: false, timeout:3000, 'connect_timeout': 3000});
						
						ioCSocket.on('connect', function() {
							if (incomeData.data) {
								ioCSocket.emit('hubProxy', {
								    from : incomeData.from,
								    proxy : ioCSocket.id,
								    to : incomeData.to,
								    data : incomeData.data
								  }, (data) => {});
							} 									
							ioCSocket.disconnect();
							cbk(true);
						});

						ioCSocket.on('connect_error', function(error){
						    cbk(false);
						});
						
						ioCSocket.on('connect_timeout', (timeout) => {
							 cbk(false);
						});
						
						ioCSocket.on('disconnected', function(){
						    cbk(true);
						});
						
					} 
				})(o)
			}
			CP.parallel(_f, function(data) {
			}, 60000);
		};
		
		me.hubQuery = function (cfg, room, IO) {
			let me = this, clusters =  me.getCluster(cfg.host);
			
			var CP = new pkg.crowdProcess(), _f = {};
			_f['self'] = function(cbk)  {
				IO.io.in(room).clients((err, clients) => {
					var obj_clients = {};
					for (var i = 0 ;  i < clients.length; i++) {
						//var uniqueId = pkg.comm.getSERVERID() + '_' + clients[i].replace(/\/\#/g, '');
						var uniqueId = me.CommIP  + '_' + clients[i].replace(/\/\#/g, '');
						if (IO.mapping[uniqueId]) {
							obj_clients[uniqueId] =  IO.mapping[uniqueId]+'-AAA';
						} else {
							obj_clients[uniqueId] = '-BBB';
						}
					}
					cbk(obj_clients);
				});
			};
			for(o in clusters) {
				_f[o] = (function(o) { 
					return function(cbk) {
						var link_url = ((isSSL) ? 'https://' : 'http://') + o + '/';
						var ioCSocket = ioClient.connect(link_url, {reconnection: false, timeout:3000, 'connect_timeout': 3000});
						
						ioCSocket.on('connect', function() {
							ioCSocket.on('hubQueryClients', function(data){
								ioCSocket.disconnect();
								cbk(data);
							      });
							ioCSocket.emit('hubQueryClients', {room:  room, hub : o});
						});
						ioCSocket.on('connect_error', function(error){
						    cbk(false);
						});
						
						ioCSocket.on('connect_timeout', (timeout) => {
							 cbk(false);
						});
					}
				})(o)
			}
			CP.parallel(_f, function(data) {
				var clients = {};
				for (o in data.results) {
					if (typeof data.results[o] === 'object') {
						for (p in data.results[o]) {
							clients[p] = data.results[o][p]
						}
					}
				}
				IO.io.to(room).emit('hubRoomCilents', {
					data: clients
				});
			}, 6000);
		};
		
		me.sendResponse = function (IO, cfg, data) {
			let me = this;
			IO.io.to(cfg.socketid).emit('clientRequestCBK', data);	
		};
		
		
		me.onConnection = function (IO, socket) {
			
			var host = (!socket || !socket.handshake || !socket.handshake.headers) ? '' : socket.handshake.headers.host;
			me.CommIP = me.getHostToIp(host);
			// console.log(pkg.comm.ip2int(me.getHostIp(host)) + '_' + socket.id.replace(/\/\#/g, ''));
			
			// var uniqueId = pkg.comm.getSERVERID() + '_' + socket.id.replace(/\/\#/g, '');
			var uniqueId = me.CommIP  + '_' + socket.id.replace(/\/\#/g, '');
			
			IO.io.to(socket.id).emit('uniqueId', uniqueId);
			IO.mapping[uniqueId] = '';
			
			var sequenceNumberByClient = new Map();	
			
			if(!host.match(/^comm([0-9]+)\_(qa|dev|prod)\.([a-z0-9]+)\.([a-z0-9]+)$/ig)) { 
				socket.disconnect();
				return true;
			} 
			var cfg = {
				socketid : socket.id,
				host : (!socket || !socket.handshake || !socket.handshake.headers) ? '' : socket.handshake.headers.host,
				query : (!socket || !socket.handshake || !socket.handshake.query) ? {} : socket.handshake.query
			};
			
			socket.on('clientRequest', function(incomeData){
				let _id = incomeData._id; 
				switch(incomeData.cmd) {
					case 'sendToRoom':
						if (!incomeData.room) {
							me.sendResponse(IO, cfg, {_id: _id,  socket_id: socket.id,
								Err : 'Missing room'});
						} else {
							socket.join(incomeData.room, function() {	
								IO.io.in(incomeData.room).clients((err, clients) => {
									if (!err)  {
										me.hubCommunication(cfg, {
											data : incomeData.data,
											from: socket.id,
											to : incomeData.room
										});
									//	incomeData.client_id
										var uniqueId = me.CommIP  + '_' + socket.id.replace(/\/\#/g, '');
										IO.mapping[uniqueId] = incomeData.client_id;
										IO.io.to(incomeData.room).emit('clientMessage', {
											data: incomeData.data,
											from: socket.id,
											to : incomeData.room
											
										});
										me.sendResponse(IO, cfg, { _id: _id,  socket_id: socket.id,
										  Err: (err)? err : null, 
										result: { status: 'success',  clients : clients}});
										}
								});
							});
						}
						break;
					case 'leaveRoom':
						socket.leave(incomeData.room,  function() {
							IO.io.in(incomeData.room).clients((err, clients) => {
								me.sendResponse(IO, cfg, { _id: _id,  socket_id: socket.id,
								  Err: (err)? err : null,
								  result: { status: 'success', clients : clients}});
							});
						});
						break;
						
					case 'roomClients':
						socket.join(incomeData.room, function() {	
							IO.io.in(incomeData.room).clients((err, clients) => {
								if (!err)  {
									me.hubQuery(cfg, incomeData.room, IO);
								}
							});
						});
						break;
					default : 
						me.sendResponse(IO, cfg, {_id: incomeData._id,  socket_id: socket.id,Err : 'Missing cmd'});
				}
			});
			
			socket.on('hubProxy', function(incomeData){
				IO.io.to(incomeData.to).emit('clientMessage', {
					data: incomeData.data,
					proxy: socket.id,
					from: incomeData.from,
					to : incomeData.to
				});
			});
			
			socket.on('hubQueryClients', function(incomeData){
				IO.io.in(incomeData.room).clients((err, clients) => {
					var obj_clients = {};
					for (var i = 0 ;  i < clients.length; i++) {
						// var uniqueId = pkg.comm.getSERVERID() + '_' + clients[i].replace(/\/\#/g, '');
						var uniqueId = me.CommIP + '_'  + clients[i].replace(/\/\#/g, '');
						if (IO.mapping[uniqueId]) {
							obj_clients[uniqueId] =  IO.mapping[uniqueId] + '-CCC';
						} else {
							obj_clients[uniqueId] = 'DDD';
						}
					}
					IO.io.to(`${socket.id}`).emit('hubQueryClients', obj_clients);
				});
			});
			socket.on('setClientId', function(id){
			    // var uniqueId = pkg.comm.getSERVERID() + '_' + socket.id.replace(/\/\#/g, '');
			     var uniqueId = me.CommIP + '_' + socket.id.replace(/\/\#/g, '');
			     IO.mapping[uniqueId] = 'CID_' + id;
			});			

			sequenceNumberByClient.set(socket, 1);
			socket.on("disconnect", () => {
				delete IO.mapping[uniqueId];
				sequenceNumberByClient.delete(socket);
			});
		};
		
	};
	
	if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
		module.exports = obj;
	} 
	
})();
