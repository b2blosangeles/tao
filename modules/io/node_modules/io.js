(function () {
	var obj =  function (env, pkg, server, isSSL) {
		let me = this;
		
		me.mapping = {};
		me.io = require( env.root_path + '/package/socket_io/node_modules/socket.io').listen(server);
		var ioClient = require(env.root_path + '/package/socket.io-client/node_modules/socket.io-client');
					
		let sequenceNumberByClient = new Map();	
		
		this.getCluster = function (host, full) {
			let me = this, DS_m = {}, DS_d = {}, DS = {};	
			delete require.cache[env.config_path + '/main_dns.json'];	
			try { DS_m = require(env.config_path + '/main_dns.json'); } catch(e) {}
			
			delete require.cache[env.config_path + '/dynamic_dns.json'];	
			try { DS_d = require(env.config_path + '/dynamic_dns.json'); } catch(e) {}
			
			Object.assign(DS, DS_m, DS_d);
			if (!DS[host]) return [];
			let list = {}, ip_list = [];
			if  (full) { 
				list[host] =  DS[host];
				ip_list.push(DS[host]);
			}
			for(o in DS) {
				if (
					(host.match(/^comm([0-9]+)\_dev\.([a-z0-9]+)\.([a-z0-9]+)$/ig) &&
						o.match(/^comm([0-9]+)\_dev\.([a-z0-9]+)\.([a-z0-9]+)$/ig)) 
					|| (host.match(/^comm([0-9]+)\_prod\.([a-z0-9]+)\.([a-z0-9]+)$/ig) &&
						o.match(/^comm([0-9]+)\_prod\.([a-z0-9]+)\.([a-z0-9]+)$/ig))
					|| (host.match(/^comm([0-9]+)\_qa\.([a-z0-9]+)\.([a-z0-9]+)$/ig) &&
						o.match(/^comm([0-9]+)\_qa\.([a-z0-9]+)\.([a-z0-9]+)$/ig))
				) { 
					 if (DS[o] !== DS[host]) {
						 if (ip_list.indexOf(DS[o]) === -1) {
							list[o] = DS[o];
							ip_list.push(list[o])
						 }
					 }
				}
				
			}
			console.log("===getCluster0===");
			console.log(list);
			return list;
		};
		
		me.sendResponse = function (cfg, data) {
			let me = this;
			me.io.to(cfg.socketid).emit('clientRequestCBK', data);	
		};		
		me.hubService = function (cfg, incomeData) {
			let me = this, clusters =  me.getCluster(cfg.host);
	
			var CP = new pkg.crowdProcess(), _f = {};
			console.log(clusters);
			for(o in clusters) {
				_f[o] = (function(o) { 
					return function(cbk) {
						var link_url = ((isSSL) ? 'https://' : 'http://') + o + '/';
						var ioCSocket = ioClient.connect(link_url, {reconnection: false, timeout:3000, 'connect_timeout': 3000});
						console.log(link_url);
						ioCSocket.on('connect', function() {
							if (incomeData.data) {
								ioCSocket.emit('hubProxy', {
								    from : incomeData.from,
								    proxy : ioCSocket.id,
								    to : incomeData.to,
								    data : incomeData.data
								  }, (data) => {});
							} 									
							ioCSocket.disconnect();
							cbk(true);
						});

						ioCSocket.on('connect_error', function(error){
						    cbk(false);
						});
						
						ioCSocket.on('connect_timeout', (timeout) => {
							 cbk(false);
						});
						
						ioCSocket.on('disconnected', function(){
						    cbk(true);
						});
						
					} 
				})(o)
			}
			CP.serial(_f, function(data) {
			}, 30000);
		};
		me.hubQuery = function (cfg, room) {
			let me = this, clusters =  me.getCluster(cfg.host, true);
			
			var CP = new pkg.crowdProcess(), _f = {};
			
			_f['self'] = function(cbk)  {
				me.io.in(room).clients((err, clients) => {
					cbk(clients);
				});
			};
			for(o in clusters) {
				_f[o] = (function(o) { 
					return function(cbk) {
						var link_url = ((isSSL) ? 'https://' : 'http://') + o + '/';
						var ioCSocket = ioClient.connect(link_url, {reconnection: false, timeout:3000, 'connect_timeout': 3000});
						
						ioCSocket.on('connect', function() {
							// console.log('ioCSocket.io.engine.id-->');
							// console.log(ioCSocket.io.engine.id);
							ioCSocket.emit('hubQueryClients', {room:  room, hub : o}, (data) => {});
							ioCSocket.on('hubQueryClients', function(data){
								ioCSocket.disconnect();
								cbk(data);
							      });
						});
						ioCSocket.on('connect_error', function(error){
						    cbk(false);
						});
						
						ioCSocket.on('connect_timeout', (timeout) => {
							 cbk(false);
						});
					}
				})(o)
			}
			CP.serial(_f, function(data) {
				var clients = [];
				for (o in data.results) {
					if (Array.isArray(data.results[o])) {
						clients = clients.concat(data.results[o]);
					}
				}
				me.io.to(room).emit('hubRoomCilents', {
					data: clients
				});
			}, 18000);
		};
		
		me.io.on("connection", (socket) => {
			// socket.id = "YOUR_CUSTOM_ID";
			var host = (!socket || !socket.handshake || !socket.handshake.headers) ? '' : socket.handshake.headers.host;
			if(!host.match(/^comm([0-9]+)\_(qa|dev|prod)\.([a-z0-9]+)\.([a-z0-9]+)$/ig)) { 
				socket.disconnect();
				return true;
			} 
			var cfg = {
				socketid : socket.id,
				host : (!socket || !socket.handshake || !socket.handshake.headers) ? '' : socket.handshake.headers.host,
				query : (!socket || !socket.handshake || !socket.handshake.query) ? {} : socket.handshake.query
			};
			socket.on('askUniqueId', function(){
				me.io.to(socket.id).emit('uniqueId', pkg.comm.getUUID());
			});
			
			socket.on('clientRequest', function(incomeData){
				let _id = incomeData._id; 
				switch(incomeData.cmd) {
					case 'sendToRoom':
						/*
						me.io.to(incomeData.room).emit('clientMessage', {
							data: incomeData.data,
							from: socket.id,
							to : incomeData.room
						});	
						*/
						if (!incomeData.room) {
							me.sendResponse(cfg, {_id: _id,  socket_id: socket.id,
								Err : 'Missing room'});
						} else {
							socket.join(incomeData.room, function() {	
								me.io.in(incomeData.room).clients((err, clients) => {
									if (!err)  {
										me.hubService(cfg, {
											data : incomeData.data,
											from: socket.id,
											to : incomeData.room
										});
										
										me.io.to(incomeData.room).emit('clientMessage', {
											data: incomeData.data,
											from: socket.id,
											to : incomeData.room
											
										});
										me.sendResponse(cfg, { _id: _id,  socket_id: socket.id,
										  Err: (err)? err : null, 
										result: { status: 'success',  clients : clients}});
										}
								});
							});
						}
						break;
					case 'leaveRoom':
						socket.leave(incomeData.room,  function() {
							me.io.in(incomeData.room).clients((err, clients) => {
								me.sendResponse(cfg, { _id: _id,  socket_id: socket.id,
								  Err: (err)? err : null,
								  result: { status: 'success', clients : clients}});
							});
						});
						break;
						
					case 'roomClients':
						socket.join(incomeData.room, function() {	
							me.io.in(incomeData.room).clients((err, clients) => {
								if (!err)  {
									me.hubQuery(cfg, incomeData.room);
									/*
									me.io.to(incomeData.room).emit('hubRoomCilents', {
										room : incomeData.room,
										hub  : cfg.host,
										clients: clients,
										niu : 'niuuBBB'
									});
									*/
								}
							});
						});
						break;
					default : 
						me.sendResponse(cfg, {_id: incomeData._id,  socket_id: socket.id,Err : 'Missing cmd'});
				}
			});
			
			socket.on('hubProxy', function(incomeData){
				me.io.to(incomeData.to).emit('clientMessage', {
					data: incomeData.data,
					proxy: socket.id,
					from: incomeData.from,
					to : incomeData.to
				});
			});
			
			socket.on('hubQueryClients', function(incomeData){
				me.io.in(incomeData.room).clients((err, clients) => {
					for (var i = 0 ;  i < clients.length; i++) {
						if (me.mapping[clients[i]]) {
							clients[i] = me.mapping[clients[i]];
						}
					}
					me.io.to(`${socket.id}`).emit('hubQueryClients', clients);
				});
			});
			socket.on('setClientId', function(id){
			    me.mapping[socket.id] = id;
				console.log(me.mapping);
			});			

			sequenceNumberByClient.set(socket, 1);
			socket.on("disconnect", () => {
				delete me.mapping[socket.id];
				sequenceNumberByClient.delete(socket);
			});
		});		
	};
	
	if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
		module.exports = obj;
	} 
	
})();
