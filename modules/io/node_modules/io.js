(function () {
	function _getServerIP() {
	    var ifaces = require('os').networkInterfaces(), address=[];
	    for (var dev in ifaces) {
		var v =  ifaces[dev].filter((details) => details.family === 'IPv4' && details.internal === false);
		for (var i=0; i < v.length; i++) address[address.length] = v[i].address;
	    }
	    return address;
	};	
	var obj =  function (env, pkg, server) {
		let me = this;
		me.io = require( env.root_path + '/package/socket_io/node_modules/socket.io').listen(server);
		var ioClient = require(env.root_path + '/package/socket.io-client/node_modules/socket.io-client');
					
		
		let sequenceNumberByClient = new Map();	
		
		this.getCluster = function (host) {
			let me = this, DS_m = {}, DS_d = {}, DS = {};	
			delete require.cache[env.config_path + '/main_dns.json'];	
			try { DS_m = require(env.config_path + '/main_dns.json'); } catch(e) {}
			
			delete require.cache[env.config_path + '/dynamic_dns.json'];	
			try { DS_d = require(env.config_path + '/dynamic_dns.json'); } catch(e) {}
			
			Object.assign(DS, DS_m, DS_d);
			if (!DS[host]) return [];
			let list = {}
			for(o in DS) {
				if (
					(host.match(/^comm([0-9]+)\_dev\.([a-z0-9]+)\.([a-z0-9]+)$/ig) &&
						o.match(/^comm([0-9]+)\_dev\.([a-z0-9]+)\.([a-z0-9]+)$/ig)) 
					|| (host.match(/^comm([0-9]+)\_prod\.([a-z0-9]+)\.([a-z0-9]+)$/ig) &&
						o.match(/^comm([0-9]+)\_prod\.([a-z0-9]+)\.([a-z0-9]+)$/ig))
					|| (host.match(/^comm([0-9]+)\_qa\.([a-z0-9]+)\.([a-z0-9]+)$/ig) &&
						o.match(/^comm([0-9]+)\_qa\.([a-z0-9]+)\.([a-z0-9]+)$/ig))
				) { 
					// if (DS[o] !== DS[host]) {    
						list[o] = DS[o];
					//}
				}
				
			}	
			return list;
		};				
		
		me.sendResponse = function (cfg, data) {
			let me = this;
			me.io.to(cfg.socketid).emit('clientRequestCBK', data);	
		};		
		me.hubService = function (cfg, incomeData) {
			let me = this, clusters =  me.getCluster(cfg.host);
			
			var CP = new pkg.crowdProcess(), _f = {};
			for(o in clusters) {
				_f[o] = (function(o) { 
					return function(cbk) {
						var ioCSocket = ioClient.connect('http://' + o + '/');
						ioCSocket.on('connect', function() {
							if (incomeData.data) {
								ioCSocket.emit('hubProxy', {
								    from : incomeData.from,
								    proxy : ioCSocket.id,
								    to : incomeData.to,
								    data : incomeData.data
								  }, (data) => {});
							} 									
							ioCSocket.disconnect();
						});
						ioCSocket.on('connect_failed', function(){
						    cbk(false);
						});
						ioCSocket.on('disconnect', function(){
						    cbk(true);
						});
					} 
				})(o)
			}
			CP.serial(_f, function(data) {}, 6000);
		};
		me.hubQuery = function (cfg, room) {
			let me = this, clusters =  me.getCluster(cfg.host);
			
			var CP = new pkg.crowdProcess(), _f = {};
			for(o in clusters) {
				_f[o] = (function(o) { 
					return function(cbk) {
						var ioCSocket = ioClient.connect('http://' + o + '/');
						ioCSocket.on('connect', function() {
							ioCSocket.emit('hubQuery', {sic: ioCSocket.id, room:  room, hub : o}, (data) => {});									
							ioCSocket.disconnect();
						});
						ioCSocket.on('connect_failed', function(){
						    cbk(false);
						});
						ioCSocket.on('disconnect', function(){
						    cbk(true);
						});
					}
				})(o)
			}
			CP.serial(_f, function(data) {}, 6000);
		};
		
		me.io.on("connection", (socket) => {
			var host = (!socket || !socket.handshake || !socket.handshake.headers) ? '' : socket.handshake.headers.host;
			if(!host.match(/^comm([0-9]+)\_(qa|dev|prod)\.([a-z0-9]+)\.([a-z0-9]+)$/ig)) { 
				socket.disconnect();
				return true;
			} 
			var cfg = {
				socketid : socket.id,
				host : (!socket || !socket.handshake || !socket.handshake.headers) ? '' : socket.handshake.headers.host,
				query : (!socket || !socket.handshake || !socket.handshake.query) ? {} : socket.handshake.query
			};
			
			socket.on('clientRequest', function(incomeData){
				let _id = incomeData._id; 
				switch(incomeData.cmd) {
					case 'sendToRoom':
						/*
						me.io.to(incomeData.room).emit('clientMessage', {
							data: incomeData.data,
							from: socket.id,
							to : incomeData.room
						});	
						*/
						if (!incomeData.room) {
							me.sendResponse(cfg, {_id: _id,  socket_id: socket.id,
								Err : 'Missing room'});
						} else {
							socket.join(incomeData.room, function() {	
								me.io.in(incomeData.room).clients((err, clients) => {
									if (!err)  {
										me.hubService(cfg, {
											data : incomeData.data,
											from: socket.id,
											to : incomeData.room
										});
										/*
										me.io.to(incomeData.room).emit('clientMessage', {
											data: incomeData.data,
											from: socket.id,
											to : incomeData.room
										});*/
										me.sendResponse(cfg, { _id: _id,  socket_id: socket.id,
										  Err: (err)? err : null, 
										result: { status: 'success',  clients : clients}});
										}
								});
							});
						}
						break;
					case 'leaveRoom':
						socket.leave(incomeData.room,  function() {
							me.io.in(incomeData.room).clients((err, clients) => {
								me.sendResponse(cfg, { _id: _id,  socket_id: socket.id,
								  Err: (err)? err : null,
								  result: { status: 'success', clients : clients}});
							});
						});
						break;
						
					case 'roomClients':
						socket.join(incomeData.room, function() {	
							me.io.in(incomeData.room).clients((err, clients) => {
								if (!err)  {
									me.hubQuery(cfg, incomeData.room);
								}
							});
						});
						break;
					default : 
						me.sendResponse(cfg, {_id: incomeData._id,  socket_id: socket.id,Err : 'Missing cmd'});
				}
			});
			
			socket.on('hubProxy', function(incomeData){
				me.io.to(incomeData.to).emit('clientMessage', {
					data: incomeData.data,
					proxy: socket.id,
					from: incomeData.from,
					to : incomeData.to
				});
			});
	
			socket.on('hubQuery', function(incomeData){
				me.io.in(incomeData.room).clients((err, clients) => {
					me.io.to(incomeData.room).emit('clientMessage', {
						room : incomeData.room,
						hub  : incomeData.hub,
						sic : incomeData.sic,
						socket_id : socket.id,
						clients: clients
					});
				});
			});
			
			sequenceNumberByClient.set(socket, 1);
			socket.on("disconnect", () => {
				sequenceNumberByClient.delete(socket);
			});
		});		
	};
	
	if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
		module.exports = obj;
	} 
	
})();
