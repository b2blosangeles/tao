(function () {
	var obj =  function (env, pkg, server, isSSL) {
		let me = this;
		
		me.mapping = {};
		me.io = require( env.root_path + '/package/socket_io/node_modules/socket.io').listen(server);
		var ioClient = require(env.root_path + '/package/socket.io-client/node_modules/socket.io-client');

		let sequenceNumberByClient = new Map();	
		
		me.ioApp = function(env, pkg, server, isSSL) {
			delete require.cache[env.root_path + '/modules/io/node_modules/ioApp.js'];
			let ioAPP =  require(env.root_path + '/modules/io/node_modules/ioApp.js');
			return new ioAPP(env, pkg, server, isSSL);
		}
		
		me.sendResponse = function (cfg, data) {
			let me = this;
			me.io.to(cfg.socketid).emit('clientRequestCBK', data);	
		};
		
		me.hubService = function (cfg, incomeData) {
			let me = this;
			me.ioApp(env, pkg, server, isSSL).hubService(cfg, incomeData);
		};
		
		me.hubQuery = function (cfg, room) {
			let me = this;
			me.ioApp(env, pkg, server, isSSL).hubQuery(cfg, room, me.io);
		};
		
		me.io.on("connection", (socket) => {
			var host = (!socket || !socket.handshake || !socket.handshake.headers) ? '' : socket.handshake.headers.host;
			if(!host.match(/^comm([0-9]+)\_(qa|dev|prod)\.([a-z0-9]+)\.([a-z0-9]+)$/ig)) { 
				socket.disconnect();
				return true;
			} 
			var cfg = {
				socketid : socket.id,
				host : (!socket || !socket.handshake || !socket.handshake.headers) ? '' : socket.handshake.headers.host,
				query : (!socket || !socket.handshake || !socket.handshake.query) ? {} : socket.handshake.query
			};
			socket.on('askUniqueId', function(){
				me.io.to(socket.id).emit('uniqueId', pkg.comm.getUUID());
			});
			
			socket.on('clientRequest', function(incomeData){
				let _id = incomeData._id; 
				switch(incomeData.cmd) {
					case 'sendToRoom':
						if (!incomeData.room) {
							me.sendResponse(cfg, {_id: _id,  socket_id: socket.id,
								Err : 'Missing room'});
						} else {
							socket.join(incomeData.room, function() {	
								me.io.in(incomeData.room).clients((err, clients) => {
									if (!err)  {
										me.hubService(cfg, {
											data : incomeData.data,
											from: socket.id,
											to : incomeData.room
										});
										
										me.io.to(incomeData.room).emit('clientMessage', {
											data: incomeData.data,
											from: socket.id,
											to : incomeData.room
											
										});
										me.sendResponse(cfg, { _id: _id,  socket_id: socket.id,
										  Err: (err)? err : null, 
										result: { status: 'success',  clients : clients}});
										}
								});
							});
						}
						break;
					case 'leaveRoom':
						socket.leave(incomeData.room,  function() {
							me.io.in(incomeData.room).clients((err, clients) => {
								me.sendResponse(cfg, { _id: _id,  socket_id: socket.id,
								  Err: (err)? err : null,
								  result: { status: 'success', clients : clients}});
							});
						});
						break;
						
					case 'roomClients':
						socket.join(incomeData.room, function() {	
							me.io.in(incomeData.room).clients((err, clients) => {
								if (!err)  {
									me.hubQuery(cfg, incomeData.room);
								}
							});
						});
						break;
					default : 
						me.sendResponse(cfg, {_id: incomeData._id,  socket_id: socket.id,Err : 'Missing cmd'});
				}
			});
			
			socket.on('hubProxy', function(incomeData){
				me.io.to(incomeData.to).emit('clientMessage', {
					data: incomeData.data,
					proxy: socket.id,
					from: incomeData.from,
					to : incomeData.to
				});
			});
			
			socket.on('hubQueryClients', function(incomeData){
				me.io.in(incomeData.room).clients((err, clients) => {
					var obj_clients = {};
					for (var i = 0 ;  i < clients.length; i++) {
						if (me.mapping[clients[i]]) {
							obj_clients[clients[i]] =  me.mapping[clients[i]];
						} else {
							obj_clients[clients[i]] = '';
						}
					}
					me.io.to(`${socket.id}`).emit('hubQueryClients', obj_clients);
				});
			});
			socket.on('setClientId', function(id){
			    me.mapping[socket.id] = 'CID_' + id;
			});			

			sequenceNumberByClient.set(socket, 1);
			socket.on("disconnect", () => {
				delete me.mapping[socket.id];
				sequenceNumberByClient.delete(socket);
			});
		});		
	};
	
	if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
		module.exports = obj;
	} 
	
})();
