(function () {
	
	var obj =  function (env, pkg, server) {
		let me = this;
		me.io = require( env.root_path + '/package/socket_io/node_modules/socket.io').listen(server);
		
		delete require.cache[env.root_path + '/package/socketNodeClient/socketNodeClient.js'];
		var socketNodeClient = require(env.root_path + '/package/socketNodeClient/socketNodeClient.js');
		

		let sequenceNumberByClient = new Map();	
		
		
		this.envSite = function(host, env) {
			var me = this;
			let v = JSON.parse(JSON.stringify(env));
			if (host) {
				if(host.match(/^node([0-9]+)\_(qa|dev|prod)\.([a-z0-9]+)\.([a-z0-9]+)$/ig)) { 
					v.site_path = v.sites_path + '/' + 'node';
					return v;
				} 
				if(host.match(/^master([0-9]+)\_(qa|dev|prod)\.([a-z0-9]+)\.([a-z0-9]+)$/ig)) { 
					v.site_path = v.sites_path + '/' + 'master';
					return v;
				}
				if(host.match(/^comm([0-9]+)\_(qa|dev|prod)\.([a-z0-9]+)\.([a-z0-9]+)$/ig)) { 
					v.site_path = v.sites_path + '/' + 'comm';
					return v;
				} 
				if(host.match(/^(www\.|dev\.|qa\.|)taobase\.(com|win)$/ig)) { 
					v.site_path = v.sites_path + '/' + 'root';
					return v;
				}
				
				if(host.match(/^([a-z0-9]+)\.dev\.(taobase|shusiou)\.(com|win)$/i)) { 
					let RT = host.match(/^([a-z0-9]+)\.dev\.(taobase|shusiou)\.(com|win)$/);
					v.site_path = v.root_path + '/devs/' + RT[1];
					return v;
				}
			}	
			v.site_path = v.root_path + '/devs/admin' ;
			return v;
		}
		this.runSocketService = function(cfg, incomeData) {
			var me = this, outData = {};
			if (!cfg._code) {
				me.sendResponse(cfg, {incomeData : incomeData});
			} else {
				var p = me.envSite(cfg.host, env).site_path + '/socketService/' + cfg._code;
				pkg.fs.exists(p, function(exists) {
					if (exists) {
						pkg.fs.stat(p, function(err, stats) {
							 if (stats.isFile()) {

								try {
									delete require.cache[p];
									var taskClass = require(p);
									var entity = new taskClass(pkg, me.envSite(env), 
										incomeData, 
										function(data) {
											me.sendResponse(cfg, {
												incomeData : incomeData,
												outData : data});	
										});
									entity.call();
								} catch(err) {
									pkg.fs.readFile(p, 'utf8', function(err, code) {
										if (!err) {
											try {
												new Function('TAO', code)
												({require : require, pkg: pkg, env: me.envSite(env), 
												  sendResponse : function(data) {
													me.sendResponse(cfg, {
													incomeData : incomeData,
													outData : data});	
												}});
											} catch(err) {
												me.sendResponse(cfg, {
													incomeData : incomeData,
													error : err.message});
											}
										} else {
											me.sendResponse(cfg, {
												incomeData : incomeData,
												error : err.message});									
										}
									});								
								}		

							 } else {
								me.sendResponse(cfg, {incomeData : incomeData});							 
							 }
						});									
					} else {
						me.sendResponse(cfg, {incomeData : incomeData});				
					} 
				});	
			}
		};
		me.sendResponse = function (cfg, data) {
			let me = this;
			me.io.to(cfg.socketid).emit('clientRequestCBK', data);		
		};		

		me.io.on("connection", (socket) => {
			// console.log('===connected=8==>');
			var cfg = {
				socketid : socket.id,
				host : (!socket || !socket.handshake || !socket.handshake.headers) ? '' : socket.handshake.headers.host,
				query : (!socket || !socket.handshake || !socket.handshake.query) ? {} : socket.handshake.query
			};
			// console.log(cfg);
			socket.on('clientRequest', function(incomeData){
				let _id = incomeData._id; 
				switch(incomeData.cmd) {
					case 'sendToRoom':
						if (!incomeData.room) {
							me.runSocketService(cfg, {_id: _id,  socket_id: socket.id,
								Err : 'Missing room'});
						} else {
							console.log('---AAA---->');
							console.log(socket.id);
							console.log('---BBB---->');
							socket.join(incomeData.room, function() {
								
								me.io.in(incomeData.room).clients((err, clients) => {
									
									console.log(clients);
									
									if (incomeData.data) {
										me.io.to(incomeData.room).emit('clientMessage', {
											data: incomeData.data,
											from: socket.id,
											to : incomeData.room
										});
									}									
									me.runSocketService(cfg, { _id: _id,  socket_id: socket.id,
									  Err: (err)? err : null, 
									result: { status: 'success',  clients : clients}});
								});
							});
						}
						break;
					case 'leaveRoom':
						socket.leave(incomeData.room,  function() {
							me.io.in(incomeData.room).clients((err, clients) => {
								me.runSocketService(cfg, { _id: _id,  socket_id: socket.id,
								  Err: (err)? err : null,
								  result: { status: 'success', clients : clients}});
							});
						});
						break;
					case 'sendToSocket':
						if (!incomeData.toSocket) {
							me.runSocketService(cfg, {_id: _id,  socket_id: socket.id,
								Err : 'Missing toSocket'});
						} else {
							me.runSocketService(cfg, {_id: _id,  socket_id: socket.id,
								Err : null, result: { status: 'success'}});
							if (incomeData.data) {
								me.io.to('/#' + incomeData.toSocket.replace(/^\/\#/, '')).emit('clientMessage', {
									data: incomeData.data,
									from: socket.id,
									to : incomeData.toSocket
								});
							}
						}
						break;	
					default : 
						me.runSocketService(cfg, {_id: incomeData._id,  socket_id: socket.id,Err : 'Missing cmd'});
				}
			});
					
			sequenceNumberByClient.set(socket, 1);
			socket.on("disconnect", () => {
				sequenceNumberByClient.delete(socket);
			});
		});		
	};
	
	if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
		module.exports = obj;
	} 
	
})();
