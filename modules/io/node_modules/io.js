(function () {
	var obj =  function (env, pkg, server, isSSL) {
		let me = this;
		me.mapping = {};
		
		me.domainList =  function() {
			let me = this, DS_m = {}, DS_d = {}, DS = {};	
			delete require.cache[env.config_path + '/main_dns.json'];
			delete require.cache[env.config_path + '/dynamic_dns.json'];
			try { 
				DS_m = require(env.config_path + '/main_dns.json'); 
			    	DS_d = require(env.config_path + '/dynamic_dns.json');
			} catch(e) {}
			Object.assign(DS, DS_m, DS_d);
			return DS;
		};
		
		me.serverRule = function(N) {
			var TP = ['comm', 'auth'], ENV = ['dev', 'prod', 'qa'];
			for (var i = 0; i < TP.length; i++) {
				for (var j = 0; j < ENV.length; j++) {
					var patt = new RegExp('^'+ TP[i] +'([0-9]+)\_' + ENV[j] + '\.([a-z0-9]+)\.([a-z]+)$', 'ig');
					if (patt.test(N[0]) && patt.test(N[1])) return true;
				}
			}
			return false;
		}

		me.getCluster = function (host) {
			let me = this, DS = me.domainList();
			if (!DS[host]) return [];
			let list = {}, ip_list = [];
			for(o in me.domainList()) {
				if (me.serverRule([host, o]))  { 
					 if (DS[o] !== DS[host]) {
						 if (ip_list.indexOf(DS[o]) === -1) {
							list[o] = DS[o];
							ip_list.push(list[o])
						 }
					 }
				}
			}
			return list;
		};
		
		me.host2ip = function (host) {
			let me = this, DS = me.domainList();
			return DS[host];
		};
		me.ip2host = function (ip) {
			let me = this, DS = me.domainList();
			for (var o in DS) { if (DS[o] === ip) return o; }
			return false;
		};		
		
		me.io = require( env.root_path + '/package/socket_io/node_modules/socket.io').listen(server);
		me.io.on("connection", (socket) => {
			let me = this;
			var host = (!socket || !socket.handshake || !socket.handshake.headers) ? '' : socket.handshake.headers.host;
			if (pkg.comm.isIp(host)) {
				return true;
			}
			delete require.cache[env.root_path + '/modules/io/node_modules/ioApp.js'];
			let ioAPP =  require(env.root_path + '/modules/io/node_modules/ioApp.js');
			try {
				new ioAPP(me, env, pkg, server, host, isSSL).onConnection(socket);
			} catch (err) {
				me.io.to(socket.id).emit('ioAppError', err.mrssage);
				socket.disconnect();
			}
		});		
	};
	
	if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
		module.exports = obj;
	} 
	
})();
