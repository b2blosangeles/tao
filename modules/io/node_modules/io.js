(function () {
	
	var obj =  function (env, pkg, server) {
		let me = this;
		me.io = require( env.root_path + '/package/socket_io/node_modules/socket.io').listen(server);
		
		delete require.cache[env.root_path + '/package/socketNodeClient/socketNodeClient.js'];
		var socketNodeClient = require(env.root_path + '/package/socketNodeClient/socketNodeClient.js');
		

		let sequenceNumberByClient = new Map();	
		
		me.callbackSend = function (socketid, data) {
			let me = this;
			me.io.to(socketid).emit('clientRequestCBK', data);		
		}
		
		me.io.on("connection", (socket) => {
			
			socket.on('clientRequest', function(incomeData){
				let _id = incomeData._id; 
				switch(incomeData.cmd) {
					case 'sendToRoom':
						if (!incomeData.room) {
							me.callbackSend(socket.id, {_id: _id,  socket_id: socket.id,
								Err : 'Missing room'});
						} else {
							socket.join(incomeData.room, function() {
								me.io.in(incomeData.room).clients((err, clients) => {
									if (incomeData.data) {
										me.io.to(incomeData.room).emit('clientMessage', {
											data: incomeData.data,
											from: socket.id,
											to : incomeData.room
										});
									}									
									me.callbackSend(socket.id, { _id: _id,  socket_id: socket.id,
									  Err: (err)? err : null, 
									result: { status: 'success',  clients : clients}});
								});
							});
						}
						break;
					case 'leaveRoom':
						socket.leave(incomeData.room,  function() {
							me.io.in(incomeData.room).clients((err, clients) => {
								me.callbackSend(socket.id, { _id: _id,  socket_id: socket.id,
								  Err: (err)? err : null,
								  result: { status: 'success', clients : clients}});
							});
						});
						break;
					case 'sendToSocket':
						if (!incomeData.toSocket) {
							me.callbackSend(socket.id, {_id: _id,  socket_id: socket.id,
								Err : 'Missing toSocket'});
						} else {
							me.callbackSend(socket.id, {_id: _id,  socket_id: socket.id,
								Err : null, result: { status: 'success'}});
							if (incomeData.data) {
								me.io.to('/#' + incomeData.toSocket.replace(/^\/\#/, '')).emit('clientMessage', {
									data: incomeData.data,
									from: socket.id,
									to : incomeData.toSocket
								});
							}
						}
						break;	
					default : 
						me.callbackSend(socket.id, {_id: incomeData._id,  socket_id: socket.id,Err : 'Missing cmd'});
				}
			});
					
			sequenceNumberByClient.set(socket, 1);
			socket.on("disconnect", () => {
				sequenceNumberByClient.delete(socket);
			});
		});		
	};
	
	if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
		module.exports = obj;
	} 
	
})();
